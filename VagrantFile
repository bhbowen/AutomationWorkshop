required_plugins = %w(vagrant-junos vagrant-host-shell)
required_plugins.each do |plugin|
  system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
end

Vagrant.configure(2) do |config|

  is_windows = Vagrant::Util::Platform.windows?
  # install git and add C:\Program Files\Git\usr\bin to PATH
  # or run "set PATH=%PATH%;C:\Program Files\Git\usr\bin" in terminal(works for duration of terminal)

  # VSRX
  config.vm.define :vsrx do |vsrx|
    vsrx.vm.hostname = :vsrx
    vsrx.vm.box = 'vsrx'
    if is_windows
      vsrx.vm.box_url = '.\boxes\juniper-ffp-12.1X47-D15.4-packetmode.box'
    else
      vsrx.vm.box_url = './boxes/juniper-ffp-12.1X47-D15.4-packetmode.box'
    end
    vsrx.vm.network :private_network, ip: '172.16.0.2'
    vsrx.vm.provider :virtualbox do |vb|
      vb.gui = false
      vb.cpus = 2 # needs 2 to boot?
      vb.memory = 512
    end
  end

  config.vm.define :ubuntu do |ubuntu|
    ubuntu.vm.hostname = :ubuntu
    ubuntu.vm.box = 'ubuntu'
    if is_windows
      ubuntu.vm.box = '.\boxes\ubuntu1404-desktop.box'
    else
      ubuntu.vm.box = './boxes/ubuntu1404-desktop.box'
    end
    ubuntu.vm.network :private_network, ip: '172.16.0.3'
    ubuntu.vm.provider :virtualbox do |vb|
      vb.gui = true
      vb.cpus = 1
      vb.memory = 1024 # works with 1024, 512 will need a swap file
    end

    if is_windows
      ubuntu.vm.provision :file, source: '.vagrant\machines\vsrx\virtualbox\private_key', destination: '/home/vagrant/.ssh/vsrx_key'
      ubuntu.vm.provision :file, source: 'vm_config_files\ssh_config', destination: '/home/vagrant/.ssh/config'
      ubuntu.vm.synced_folder 'scripts', '/home/vagrant/Desktop/scripts'
    else
      ubuntu.vm.provision :file, source: '.vagrant/machines/vsrx/virtualbox/private_key', destination: '/home/vagrant/.ssh/vsrx_key'
      ubuntu.vm.provision :file, source: 'vm_config_files/ssh_config', destination: '/home/vagrant/.ssh/config'
      ubuntu.vm.synced_folder 'scripts', '/home/vagrant/Desktop/scripts'
    end

    #stop network manager from taking over eth1
    ubuntu.vm.provision :shell, run: :always, inline: <<-SHELL
      sudo service network-manager stop
      sudo ifdown eth1
      sudo ifup eth1
    SHELL

    # Provisioning script (install software)
    ubuntu.vm.provision :shell, inline: <<-SHELL
      DEBIAN_FRONTEND=noninteractive
      sudo apt-get update -y
#      sudo apt-get install -y python python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev
      sudo apt-get install -y python python-dev python-pip libxml2-dev libxslt1-dev libz-dev libffi-dev libssl-dev
      sudo pip install -U junos-eznc
      sudo pip install -U distribute
      sudo apt-get install -y software-properties-common
      sudo apt-add-repository ppa:ansible/ansible
      sudo apt-get update -y
      sudo apt-get install -y ansible
      sudo apt-get install -y git
      cd /home/vagrant/Desktop
      git clone https://github.com/Juniper/ansible-junos-stdlib.git
      chown -R vagrant:vagrant /home/vagrant/Desktop/ansible-junos-stdlib
      sudo add-apt-repository -y ppa:webupd8team/sublime-text-2
      sudo apt-get update -y
      sudo apt-get install -y sublime-text
    SHELL

    # Swap file creation... if needed
    # ubuntu.vm.provision "shell", inline: <<-SHELL
    #   sudo dd if=/dev/zero of=/swapfile bs=1024 count=524288
    #   sudo chmod 600 /swapfile
    #   sudo mkswap /swapfile
    #   sudo swapon /swapfile
    # SHELL

  end
end


